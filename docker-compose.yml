version: "3.9"
services:
  app:
    restart: always
    depends_on:
      database:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    build: .
    command: npm start
    volumes:
      - ./public:/public
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://app:8080/heal-check"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - devnet


  database:
    image: postgres
    restart: always
    volumes:
      - ./db/postgresql/CreateTable.sql:/docker-entrypoint-initdb.d/create_tables.sql
      - ./db/postgresql/CreateFollower.sql:/docker-entrypoint-initdb.d/10-create_followers_procedures.sql
      - ./db/postgresql/CreateInsertPurchases.sql:/docker-entrypoint-initdb.d/20-create_purchases_procedures.sql
      - ./db/postgresql/CreateInsertUser.sql:/docker-entrypoint-initdb.d/30-create_user_procedures.sql
      - ./db/postgresql/CreateInsertProduct.sql:/docker-entrypoint-initdb.d/40-create_product_procedures.sql
      - ./db/postgresql/CreateAdduserV2.sql:/docker-entrypoint-initdb.d/50-create_product_procedures.sql
      - ./db/postgresql/CreateReset.sql:/docker-entrypoint-initdb.d/60-create_reset.sql



    networks:
      - devnet
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=nosql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  neo4j:
    image: neo4j
    networks:
      - devnet
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      NEO4J_AUTH: neo4j/neo4jneo4j
    healthcheck:
      test: [ "CMD-SHELL", "echo RETURN 1 | cypher-shell -a bolt://neo4j:7687 -u neo4j -p neo4jneo4j || exit 1" ]
      interval: 5s
      timeout: 5s
      retries: 5


networks:
  devnet:
